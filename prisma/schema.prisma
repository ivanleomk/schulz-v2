generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String?              @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    Company            Company[]
    Customer           Customer[]
    Email              Email[]
    Note               Note[]
    Meeting            Meeting[]
    collateral         collateral[]
    File               File[]
    EmailCustomerEntry EmailCustomerEntry[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id           Int        @id @default(autoincrement())
    company_name String     @db.VarChar(1000)
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    Customer     Customer[]

    @@index([userId])
}

model Customer {
    customer_id        Int                  @id @default(autoincrement())
    user               User                 @relation(fields: [userId], references: [id])
    company            Company              @relation(fields: [companyId], references: [id])
    biodata            String               @db.VarChar(1000)
    title              String               @db.VarChar(1000)
    userId             String
    companyId          Int
    Deal               Deal[]
    Email              Email[]
    EmailCustomerEntry EmailCustomerEntry[]

    @@index([userId])
    @@index([companyId])
}

model Deal {
    deal_id          Int      @id @default(autoincrement())
    deal_size        Int      @db.UnsignedMediumInt
    deal_description String   @db.VarChar(10000) /// We can attach a description of up to 10,000 characters. This includes table formatting, markdown etc.
    customer         Customer @relation(fields: [customer_id], references: [customer_id])
    customer_id      Int

    @@index([customer_id])
}

model Email {
    email_id            Int       @id @default(autoincrement())
    email_content       String    @db.VarChar(10000) /// Raw email text string
    userId              String
    User                User      @relation(fields: [userId], references: [id])
    Customer            Customer? @relation(fields: [customerCustomer_id], references: [customer_id])
    customerCustomer_id Int?
}

model EmailCustomerEntry {
    customer Customer @relation(fields: [customer_id], references: [customer_id])
    user     User     @relation(fields: [user_id], references: [id])
    email_id Int

    user_id     String
    customer_id Int

    @@id([customer_id, user_id])
    @@index([customer_id])
    @@index([user_id])
}

model Note {
    user      User   @relation(fields: [userId], references: [id])
    note_id   Int    @id @default(autoincrement())
    note_text String @db.VarChar(10000) // Default limit of 10,000 chars for all otes
    userId    String

    @@index([userId])
}

model Meeting {
    meeting_id    Int      @id @default(autoincrement())
    user          User     @relation(fields: [userId], references: [id])
    summary       String   @db.VarChar(1000)
    meeting_date  DateTime @db.Timestamp()
    meeting_notes String   @db.VarChar(1000)
    userId        String

    @@index([userId])
}

model collateral {
    collateral_id Int    @id @default(autoincrement())
    url           String @db.VarChar(1000)
    summary       String @db.VarChar(1000)
    user          User   @relation(fields: [userId], references: [id])
    userId        String

    @@index([userId])
}

model Waitlist {
    // At most 1000 chars
    email    String   @id @unique @db.VarChar(200)
    goal     String   @default("Sales")
    name     String   @db.VarChar(1000)
    createAt DateTime @default(now())
}

model File {
    id                Int      @id @default(autoincrement())
    key               String   @unique
    url               String   @db.VarChar(1000)
    createdAt         DateTime @default(now())
    // Mutex Lock
    isProcessing      Boolean  @default(false)
    startedprocessing DateTime @default(now())
    isTranscribed     Boolean  @default(false)
    transcript        String?  @db.VarChar(10000)
    user              User     @relation(fields: [userId], references: [id])
    userId            String

    @@index([userId])
}
